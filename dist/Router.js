"use strict";

var _classProps = function (child, staticProps, instanceProps) {
  if (staticProps) Object.defineProperties(child, staticProps);
  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

require("6to5/polyfill");
var Promise = require("bluebird");
var _ = require("lodash-next");

var optionalParam = /\((.*?)\)/g;
var namedParam = /(\(\?)?:\w+/g;
var splatParam = /\*\w+/g;
var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;

function routeToRegExp(pattern) {
  pattern = pattern.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, function (match, optional) {
    return optional ? match : "([^/?]+)";
  }).replace(splatParam, "([^?]*?)");
  return new RegExp("^" + pattern + "(?:\\?([\\s\\S]*))?$");
}

function extractFragmentParameters(regexp, fragment) {
  var params = regexp.exec(fragment).slice(1);
  return params.map(function (i) {
    var param = params[i];
    if (i === params.length - 1) {
      return param || null;
    }
    return param ? decodeURIComponent(param) : null;
  });
}

var Router = (function () {
  var Router = function Router(routes) {
    if (routes === undefined) routes = {};
    _.dev(function () {
      return routes.should.be.an.Object && Object.keys(routes).map(function (pattern) {
        return pattern.should.be.a.String && routes[pattern].should.be.a.Function;
      });
    });
    this._routes = {};
  };

  _classProps(Router, null, {
    route: {
      writable: true,
      value: function (pattern, fn) {
        var _this = this;
        if (!fn) {
          _.dev(function () {
            return _this._routes.should.have.property(pattern);
          });
          return this._routes[pattern];
        }
        _.dev(function () {
          return _this._routes.should.not.have.property(pattern) && fn.should.be.a.Function;
        });
        if (pattern === null) {
          return this.default(fn);
        }
        var regexp = routeToRegExp(pattern);
        this._routes[pattern] = { regexp: regexp, fn: fn };
        return this;
      }
    },
    routes: {
      writable: true,
      value: function (patterns) {
        var _this2 = this;
        if (!patterns) {
          return this._routes;
        }
        Object.keys(patterns).forEach(function (pattern) {
          return _this2.route(pattern, patterns[pattern]);
        });
        return this;
      }
    },
    default: {
      writable: true,
      value: function (fn) {
        if (!fn) {
          return this._default;
        }
        this._default = fn;
      }
    },
    match: {
      writable: true,
      value: function (fragment) {
        var _this3 = this;
        var res = null;
        Object.keys(this._routes, function (pattern) {
          var regexp = _this3._routes[pattern].regexp;
          var fn = _this3._routes[pattern].fn;
          if (res !== null) {
            return;
          }
          if (fragment.match(regexp) !== null) {
            var params = extractFragmentParameters(regexp, fragment);
            params.push(fragment);
            res = fn.apply(null, Array.from(params));
          }
        });
        if (!res && this._default) {
          res = this._default.call(null, fragment);
        }
        return res;
      }
    }
  });

  return Router;
})();

var ConstantRouter = require("./ConstantRouter")(Router);

_.extend(Router, { ConstantRouter: ConstantRouter });

module.exports = Router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImY6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L25leHVzLXJvdXRlci9zcmMvUm91dGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekIsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2xDLElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQzs7QUFFakMsSUFBTSxhQUFhLEdBQUcsWUFBWSxDQUFDO0FBQ25DLElBQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQztBQUNsQyxJQUFNLFVBQVUsR0FBRyxRQUFRLENBQUM7QUFDNUIsSUFBTSxZQUFZLEdBQUcsMEJBQTBCLENBQUM7O0FBRWhELFNBQVMsYUFBYSxDQUFDLE9BQU8sRUFBRTtBQUM5QixTQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQzlDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQ2pDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsVUFBUyxLQUFLLEVBQUUsUUFBUSxFQUFFO0FBQzdDLFdBQU8sUUFBUSxHQUFHLEtBQUssR0FBRyxVQUFVLENBQUM7R0FDdEMsQ0FBQyxDQUNELE9BQU8sQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDakMsU0FBTyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxHQUFHLHNCQUFzQixDQUFDLENBQUM7Q0FDM0Q7O0FBRUQsU0FBUyx5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFO0FBQ25ELE1BQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVDLFNBQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsRUFBSztBQUN2QixRQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxD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QUFPLENBQUMsT0FBTyxDQUFDLENBQTVCLEVBQUU7QUFDaEIsY0FBRyxHQUFHLEtBQUssSUFBSSxFQUFFO0FBQ2YsbUJBQU87V0FDUjtBQUNELGNBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUU7QUFDbEMsZ0JBQUksTUFBTSxHQUFHLHlCQUF5QixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN6RCxrQkFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN0QixlQUFHLEdBQUcsRUFBRSx3QkFBSSxNQUFNLEVBQUMsQ0FBQztXQUNyQjtTQUNGLENBQUMsQ0FBQztBQUNILFlBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUN4QixhQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzFDO0FBQ0QsZUFBTyxHQUFHLENBQUM7T0FDWjs7OztTQXhERyxNQUFNOzs7QUEyRFosSUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRTNELENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFkLGNBQWMsRUFBRSxDQUFDLENBQUM7O0FBRXJDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDIiwiZmlsZSI6IlJvdXRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJzZ0bzUvcG9seWZpbGwnKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gtbmV4dCcpO1xuXG5jb25zdCBvcHRpb25hbFBhcmFtID0gL1xcKCguKj8pXFwpL2c7XG5jb25zdCBuYW1lZFBhcmFtID0gLyhcXChcXD8pPzpcXHcrL2c7XG5jb25zdCBzcGxhdFBhcmFtID0gL1xcKlxcdysvZztcbmNvbnN0IGVzY2FwZVJlZ0V4cCA9IC9bXFwte31cXFtcXF0rPy4sXFxcXFxcXiR8I1xcc10vZztcblxuZnVuY3Rpb24gcm91dGVUb1JlZ0V4cChwYXR0ZXJuKSB7XG4gIHBhdHRlcm4gPSBwYXR0ZXJuLnJlcGxhY2UoZXNjYXBlUmVnRXhwLCAnXFxcXCQmJylcbiAgLnJlcGxhY2Uob3B0aW9uYWxQYXJhbSwgJyg/OiQxKT8nKVxuICAucmVwbGFjZShuYW1lZFBhcmFtLCBmdW5jdGlvbihtYXRjaCwgb3B0aW9uYWwpIHtcbiAgICByZXR1cm4gb3B0aW9uYWwgPyBtYXRjaCA6ICcoW14vP10rKSc7XG4gIH0pXG4gIC5yZXBsYWNlKHNwbGF0UGFyYW0sICcoW14/XSo/KScpO1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwYXR0ZXJuICsgJyg/OlxcXFw/KFtcXFxcc1xcXFxTXSopKT8kJyk7XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RGcmFnbWVudFBhcmFtZXRlcnMocmVnZXhwLCBmcmFnbWVudCkge1xuICBsZXQgcGFyYW1zID0gcmVnZXhwLmV4ZWMoZnJhZ21lbnQpLnNsaWNlKDEpO1xuICByZXR1cm4gcGFyYW1zLm1hcCgoaSkgPT4ge1xuICAgIGxldCBwYXJhbSA9IHBhcmFtc1tpXTtcbiAgICBpZihpID09PSBwYXJhbXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIHBhcmFtIHx8IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbSA/IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbSkgOiBudWxsO1xuICB9KTtcbn1cblxuY2xhc3MgUm91dGVyIHtcbiAgY29uc3RydWN0b3Iocm91dGVzID0ge30pIHtcbiAgICBfLmRldigoKSA9PiByb3V0ZXMuc2hvdWxkLmJlLmFuLk9iamVjdCAmJlxuICAgICAgT2JqZWN0LmtleXMocm91dGVzKS5tYXAoKHBhdHRlcm4pID0+IHBhdHRlcm4uc2hvdWxkLmJlLmEuU3RyaW5nICYmIHJvdXRlc1twYXR0ZXJuXS5zaG91bGQuYmUuYS5GdW5jdGlvbilcbiAgICApO1xuICAgIHRoaXMuX3JvdXRlcyA9IHt9O1xuICB9XG5cbiAgcm91dGUocGF0dGVybiwgZm4pIHtcbiAgICBpZighZm4pIHtcbiAgICAgIF8uZGV2KCgpID0+IHRoaXMuX3JvdXRlcy5zaG91bGQuaGF2ZS5wcm9wZXJ0eShwYXR0ZXJuKSk7XG4gICAgICByZXR1cm4gdGhpcy5fcm91dGVzW3BhdHRlcm5dO1xuICAgIH1cbiAgICBfLmRldigoKSA9PiB0aGlzLl9yb3V0ZXMuc2hvdWxkLm5vdC5oYXZlLnByb3BlcnR5KHBhdHRlcm4pICYmXG4gICAgICBmbi5zaG91bGQuYmUuYS5GdW5jdGlvblxuICAgICk7XG4gICAgaWYocGF0dGVybiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdChmbik7XG4gICAgfVxuICAgIGxldCByZWdleHAgPSByb3V0ZVRvUmVnRXhwKHBhdHRlcm4pO1xuICAgIHRoaXMuX3JvdXRlc1twYXR0ZXJuXSA9IHsgcmVnZXhwLCBmbiB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcm91dGVzKHBhdHRlcm5zKSB7XG4gICAgaWYoIXBhdHRlcm5zKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcm91dGVzO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhwYXR0ZXJucykuZm9yRWFjaCgocGF0dGVybikgPT4gdGhpcy5yb3V0ZShwYXR0ZXJuLCBwYXR0ZXJuc1twYXR0ZXJuXSkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVmYXVsdChmbikge1xuICAgIGlmKCFmbikge1xuICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHQ7XG4gICAgfVxuICAgIHRoaXMuX2RlZmF1bHQgPSBmbjtcbiAgfVxuXG4gIG1hdGNoKGZyYWdtZW50KSB7XG4gICAgbGV0IHJlcyA9IG51bGw7XG4gICAgT2JqZWN0LmtleXModGhpcy5fcm91dGVzLCAocGF0dGVybikgPT4ge1xuICAgICAgbGV0IHsgcmVnZXhwLCBmbiB9ID0gdGhpcy5fcm91dGVzW3BhdHRlcm5dO1xuICAgICAgaWYocmVzICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmKGZyYWdtZW50Lm1hdGNoKHJlZ2V4cCkgIT09IG51bGwpIHtcbiAgICAgICAgbGV0IHBhcmFtcyA9IGV4dHJhY3RGcmFnbWVudFBhcmFtZXRlcnMocmVnZXhwLCBmcmFnbWVudCk7XG4gICAgICAgIHBhcmFtcy5wdXNoKGZyYWdtZW50KTtcbiAgICAgICAgcmVzID0gZm4oLi4ucGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZighcmVzICYmIHRoaXMuX2RlZmF1bHQpIHtcbiAgICAgIHJlcyA9IHRoaXMuX2RlZmF1bHQuY2FsbChudWxsLCBmcmFnbWVudCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cbn1cblxuY29uc3QgQ29uc3RhbnRSb3V0ZXIgPSByZXF1aXJlKCcuL0NvbnN0YW50Um91dGVyJykoUm91dGVyKTtcblxuXy5leHRlbmQoUm91dGVyLCB7IENvbnN0YW50Um91dGVyIH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJvdXRlcjtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==