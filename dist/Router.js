"use strict";

var _classProps = function (child, staticProps, instanceProps) {
  if (staticProps) Object.defineProperties(child, staticProps);
  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

require("6to5/polyfill");
var Promise = require("bluebird");
var _ = require("lodash-next");
var should = _.should;


var optionalParam = /\((.*?)\)/g;
var namedParam = /(\(\?)?:\w+/g;
var splatParam = /\*\w+/g;
var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;

function routeToRegExp(pattern) {
  pattern = pattern.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, function (match, optional) {
    return optional ? match : "([^/?]+)";
  }).replace(splatParam, "([^?]*?)");
  return new RegExp("^" + pattern + "(?:\\?([\\s\\S]*))?$");
}

function extractFragmentParameters(regexp, fragment) {
  var params = regexp.exec(fragment).slice(1);
  return params.map(function (i) {
    var param = params[i];
    if (i === params.length - 1) {
      return param || null;
    }
    return param ? decodeURIComponent(param) : null;
  });
}

var Router = (function () {
  var Router = function Router(routes) {
    if (routes === undefined) routes = {};
    _.dev(function () {
      return routes.should.be.an.Object && Object.keys(routes).map(function (pattern) {
        return pattern.should.be.a.String && routes[pattern].should.be.a.Function;
      });
    });
    this._routes = {};
  };

  _classProps(Router, null, {
    route: {
      writable: true,
      value: function (pattern, fn) {
        var _this = this;
        if (!fn) {
          _.dev(function () {
            return _this._routes[pattern].should.be.ok;
          });
          return this._routes[pattern];
        }
        _.dev(function () {
          return _this._routes[pattern].should.not.be.ok && fn.should.be.a.Function;
        });
        if (pattern === null) {
          return this.default(fn);
        }
        var regexp = routeToRegExp(pattern);
        this._routes[pattern] = { regexp: regexp, fn: fn };
        return this;
      }
    },
    routes: {
      writable: true,
      value: function (patterns) {
        var _this2 = this;
        if (!patterns) {
          return this._routes;
        }
        Object.keys(pattern).forEach(function (pattern) {
          return _this2.route(pattern, patterns[pattern]);
        });
        return this;
      }
    },
    default: {
      writable: true,
      value: function (fn) {
        if (!fn) {
          return this._default;
        }
        this._default = fn;
      }
    },
    match: {
      writable: true,
      value: function (fragment) {
        var _this3 = this;
        var res = null;
        Object.keys(this._routes, function (pattern) {
          var regexp = _this3._routes[pattern].regexp;
          var fn = _this3._routes[pattern].fn;
          if (res !== null) {
            return;
          }
          if (fragment.match(regexp) !== null) {
            var params = extractFragmentParameters(regexp, fragment);
            params.push(fragment);
            res = fn.apply(null, Array.from(params));
          }
        });
        if (!res && this._default) {
          res = this._default.call(null, fragment);
        }
        return res;
      }
    }
  });

  return Router;
})();

var ConstantRouter = require("./ConstantRouter")(Router);

_.extend(Router, { ConstantRouter: ConstantRouter });

module.exports = Router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImY6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L25leHVzLXJvdXRlci9zcmMvUm91dGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekIsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2xDLElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNqQyxJQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDOzs7QUFHeEIsSUFBTSxhQUFhLEdBQUcsWUFBWSxDQUFDO0FBQ25DLElBQU0sVUFBVSxHQUFHLGNBQWMsQ0FBQztBQUNsQyxJQUFNLFVBQVUsR0FBRyxRQUFRLENBQUM7QUFDNUIsSUFBTSxZQUFZLEdBQUcsMEJBQTBCLENBQUM7O0FBRWhELFNBQVMsYUFBYSxDQUFDLE9BQU8sRUFBRTtBQUM5QixTQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQzlDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQ2pDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsVUFBUyxLQUFLLEVBQUUsUUFBUSxFQUFFO0FBQzdDLFdBQU8sUUFBUSxHQUFHLEtBQUssR0FBRyxVQUFVLENBQUM7R0FDdEMsQ0FBQyxDQUNELE9BQU8sQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDakMsU0FBTyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsT0FBTyxHQUFHLHNCQUFzQixDQUFDLENBQUM7Q0FDM0Q7O0FBRUQsU0FBUyx5QkFBeUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFO0FBQ25ELE1BQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzVDLFNBQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMs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T0FBTyxDQUFDLENBQXBDLE1BQU07Y0FBRSxFQUFFLEdBQUssT0FBSyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQTVCLEVBQUU7QUFDaEIsY0FBRyxHQUFHLEtBQUssSUFBSSxFQUFFO0FBQ2YsbUJBQU87V0FDUjtBQUNELGNBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUU7QUFDbEMsZ0JBQUksTUFBTSxHQUFHLHlCQUF5QixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN6RCxrQkFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN0QixlQUFHLEdBQUcsRUFBRSx3QkFBSSxNQUFNLEVBQUMsQ0FBQztXQUNyQjtTQUNGLENBQUMsQ0FBQztBQUNILFlBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtBQUN4QixhQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzFDO0FBQ0QsZUFBTyxHQUFHLENBQUM7T0FDWjs7OztTQXhERyxNQUFNOzs7QUEyRFosSUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRTNELENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxFQUFkLGNBQWMsRUFBRSxDQUFDLENBQUM7O0FBRXJDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDIiwiZmlsZSI6IlJvdXRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJzZ0bzUvcG9seWZpbGwnKTtcbnZhciBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gtbmV4dCcpO1xuY29uc3Qgc2hvdWxkID0gXy5zaG91bGQ7XG5cblxuY29uc3Qgb3B0aW9uYWxQYXJhbSA9IC9cXCgoLio/KVxcKS9nO1xuY29uc3QgbmFtZWRQYXJhbSA9IC8oXFwoXFw/KT86XFx3Ky9nO1xuY29uc3Qgc3BsYXRQYXJhbSA9IC9cXCpcXHcrL2c7XG5jb25zdCBlc2NhcGVSZWdFeHAgPSAvW1xcLXt9XFxbXFxdKz8uLFxcXFxcXF4kfCNcXHNdL2c7XG5cbmZ1bmN0aW9uIHJvdXRlVG9SZWdFeHAocGF0dGVybikge1xuICBwYXR0ZXJuID0gcGF0dGVybi5yZXBsYWNlKGVzY2FwZVJlZ0V4cCwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKG9wdGlvbmFsUGFyYW0sICcoPzokMSk/JylcbiAgLnJlcGxhY2UobmFtZWRQYXJhbSwgZnVuY3Rpb24obWF0Y2gsIG9wdGlvbmFsKSB7XG4gICAgcmV0dXJuIG9wdGlvbmFsID8gbWF0Y2ggOiAnKFteLz9dKyknO1xuICB9KVxuICAucmVwbGFjZShzcGxhdFBhcmFtLCAnKFteP10qPyknKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcGF0dGVybiArICcoPzpcXFxcPyhbXFxcXHNcXFxcU10qKSk/JCcpO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RnJhZ21lbnRQYXJhbWV0ZXJzKHJlZ2V4cCwgZnJhZ21lbnQpIHtcbiAgbGV0IHBhcmFtcyA9IHJlZ2V4cC5leGVjKGZyYWdtZW50KS5zbGljZSgxKTtcbiAgcmV0dXJuIHBhcmFtcy5tYXAoKGkpID0+IHtcbiAgICBsZXQgcGFyYW0gPSBwYXJhbXNbaV07XG4gICAgaWYoaSA9PT0gcGFyYW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBwYXJhbSB8fCBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW0gPyBkZWNvZGVVUklDb21wb25lbnQocGFyYW0pIDogbnVsbDtcbiAgfSk7XG59XG5cbmNsYXNzIFJvdXRlciB7XG4gIGNvbnN0cnVjdG9yKHJvdXRlcyA9IHt9KSB7XG4gICAgXy5kZXYoKCkgPT4gcm91dGVzLnNob3VsZC5iZS5hbi5PYmplY3QgJiZcbiAgICAgIE9iamVjdC5rZXlzKHJvdXRlcykubWFwKChwYXR0ZXJuKSA9PiBwYXR0ZXJuLnNob3VsZC5iZS5hLlN0cmluZyAmJiByb3V0ZXNbcGF0dGVybl0uc2hvdWxkLmJlLmEuRnVuY3Rpb24pXG4gICAgKTtcbiAgICB0aGlzLl9yb3V0ZXMgPSB7fTtcbiAgfVxuXG4gIHJvdXRlKHBhdHRlcm4sIGZuKSB7XG4gICAgaWYoIWZuKSB7XG4gICAgICBfLmRldigoKSA9PiB0aGlzLl9yb3V0ZXNbcGF0dGVybl0uc2hvdWxkLmJlLm9rKTtcbiAgICAgIHJldHVybiB0aGlzLl9yb3V0ZXNbcGF0dGVybl07XG4gICAgfVxuICAgIF8uZGV2KCgpID0+IHRoaXMuX3JvdXRlc1twYXR0ZXJuXS5zaG91bGQubm90LmJlLm9rICYmXG4gICAgICBmbi5zaG91bGQuYmUuYS5GdW5jdGlvblxuICAgICk7XG4gICAgaWYocGF0dGVybiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdChmbik7XG4gICAgfVxuICAgIGxldCByZWdleHAgPSByb3V0ZVRvUmVnRXhwKHBhdHRlcm4pO1xuICAgIHRoaXMuX3JvdXRlc1twYXR0ZXJuXSA9IHsgcmVnZXhwLCBmbiB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcm91dGVzKHBhdHRlcm5zKSB7XG4gICAgaWYoIXBhdHRlcm5zKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcm91dGVzO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhwYXR0ZXJuKS5mb3JFYWNoKChwYXR0ZXJuKSA9PiB0aGlzLnJvdXRlKHBhdHRlcm4sIHBhdHRlcm5zW3BhdHRlcm5dKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkZWZhdWx0KGZuKSB7XG4gICAgaWYoIWZuKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdDtcbiAgICB9XG4gICAgdGhpcy5fZGVmYXVsdCA9IGZuO1xuICB9XG5cbiAgbWF0Y2goZnJhZ21lbnQpIHtcbiAgICBsZXQgcmVzID0gbnVsbDtcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9yb3V0ZXMsIChwYXR0ZXJuKSA9PiB7XG4gICAgICBsZXQgeyByZWdleHAsIGZuIH0gPSB0aGlzLl9yb3V0ZXNbcGF0dGVybl07XG4gICAgICBpZihyZXMgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYoZnJhZ21lbnQubWF0Y2gocmVnZXhwKSAhPT0gbnVsbCkge1xuICAgICAgICBsZXQgcGFyYW1zID0gZXh0cmFjdEZyYWdtZW50UGFyYW1ldGVycyhyZWdleHAsIGZyYWdtZW50KTtcbiAgICAgICAgcGFyYW1zLnB1c2goZnJhZ21lbnQpO1xuICAgICAgICByZXMgPSBmbiguLi5wYXJhbXMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmKCFyZXMgJiYgdGhpcy5fZGVmYXVsdCkge1xuICAgICAgcmVzID0gdGhpcy5fZGVmYXVsdC5jYWxsKG51bGwsIGZyYWdtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxufVxuXG5jb25zdCBDb25zdGFudFJvdXRlciA9IHJlcXVpcmUoJy4vQ29uc3RhbnRSb3V0ZXInKShSb3V0ZXIpO1xuXG5fLmV4dGVuZChSb3V0ZXIsIHsgQ29uc3RhbnRSb3V0ZXIgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUm91dGVyO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9